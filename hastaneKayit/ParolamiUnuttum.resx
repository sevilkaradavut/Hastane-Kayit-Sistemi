<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAQEAAAAAACAAoFgAAFgAAACgAAABAAAAAgAAAAAEACAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAs7f//JOD//4ra///Shlj/6urq/2hoaP/Lekz/+/z8/z1tpP/t7e3/e9X//0av6f8sLCz/e3l4/z8/
        P//l5eb/8PDw/5eXl/+8vLz/FnS+/+Hh4f8nk9H/Lr3//9PT0/+mudD/rOT//+LIuf/d3d3/Hdb//1dX
        Vv8JtP//oaGh/7W1tf/lz8L/wcHB/8vLy//YrZT/Vs3+/9nZ2f9Z0/j/g4OE/yih+P9Fw///9vX1/8W8
        vP9u0f//b5O1/w8PD//s8vb/FMv//6urq/9JeK3/9Pn8/xm1//9fXFr/A6///6Cbmv/B7P//0cvI/2LP
        ///59fL/md7//8rFwf8/ZJD/CV6p/15qc//z8O7/8ff6/21sa/9qSzf/mYZ6//n49/8+o9z/x3FC/xVX
        m//MyMb/6Obk/wu+//8/4P//6ujm/ypZj/+0qqr/joyM/9bV1f9hYWH/h8z4/6arsf/ku6L/4N/f/+/v
        7//Xz8//5uTi/6empv/dtZ3/7uro/2N4jP8RlPr/6urr/+Ti4P+SkpP/7Ozs/8C2tv+1wtX/d97//6Oo
        rv+4uLj/u6CP//Pz8//r6+v/VFNS/4iiwv/w9ff/6Ojo/+Pj4//j7PD/rs/n/3BwcP9LSkr/sLCw/8/P
        z//n3db/3Nzc/yyBwv9MvO7/xcbG/9jY2P//////////AAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+
        fn5+fn5+fn5+fn5+fn5+fn5+B3F3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3d3
        d3d3d3cXGxB+fn5+fn5+fn5+fn5+axIodHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0dHR0
        dHR0dHR0dHR0DTgja35+fn5+fn5+fn5+BzgODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4ODg4O
        Dg4ODg4ODg4ODg4ODgwMdCMrfn5+fn5+fn5+fiMOKCMXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcX
        FxcXFxcXFxcXFxcXFxcXFxdpHQwoD35+fn5+fn5+fhAFRGtrCQkJCWRkZGwJCVlZCQkJCQkJZGRkZGRs
        bGwEBARwcHBwcHAPcXFxFBQUFBQUCRcMDBd+fn5+fn5+fn4bDiBHBAQEBAQEBHBsTDpLS0tLS0tLPnx8
        fHx8fCJ8Pj4iIiIiIiIiPlNYeXl5eXkmfVhHBS8ifn5+fn5+fn5+WAxpR2RsbAQEBAQJIzM/Pz8/Pz8/
        Pz8/Pz8/Pz8/Pz8/Pz8/Pz8/Pz8Rd1gbeXl5eXlYKwUvIn5+fn5+fn5+fhsOaUdkZGxsBARkFDMTFRUV
        FRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUTPyBYGxt5eXl5WCtELyJ+fn5+fn5+fn4bDhJHZGRsbGwEQmZK
        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
        XV1dXV1dXV1dXV1dV0wHUgwifn5+fn5+fn5+G3VjBVQgWWsHfn5+fn5+fn5+fnEydQ5JAwMDAwMDBgMG
        BgYGBgYGBgYGSUlJSUlJSQN4BygOIn5+fn5+fn5+fhsONgVpZGsHfn5+fn5+fn5+fn5wIHUOSQMDAwMD
        AwMDAwMDBgMGBgYGBgYGBgZJSUkDeAdSDiJ+fn5+fn5+fgcydVQSEEcHfn5+fn5+fn5+fn5+BBJtDklq
        AwMDAwMDAwMDAwMGAwYGBgYGBgYGSUlJA1sHKA4ifn5+fn5+fn5TBR0iR0cHfn5+fn5+fn5+fn5+fmQi
        HQ5JAwMDAwMDAwMDAwMGAwYGBgYGBgZJSQZJSQNbB1IOIn5+fn5+fn4HXEQjBwcHBwcHfn5+fn5+fn5+
        fn5rfDYOBgMDAwMDAwMDAwMGAwYDBgYGBgYGBkkGSUkDWwcoDiJ+fn5+fn5+fiBSICBpEiJ8dxcXfSZ5
        FHEPD3AJcHd0RUkDAwMDAwMDAwMDAwYDBgYGBgYGBkkGSUlJA1sHUg4ifn5+fn5+fn5wUm1URAVUVFQF
        BUR0dHQNDQ0oKFIoNkUGAwMDAwMDBgYGBgYGBgYGSUlJSUlJSUlJSQN4B1IOIn5+fn5+fn5+fncdXCNl
        ampGRkZGRg0NREQFVB1tbURqJCQkJCQkJCQkJCQkJCQkJGoDAwMDAwMDAwMkTAdSDiJ+fn5+fn5+fn5Y
        HXwHR0JCQkJCXl5eXkxMWxRYGxtbQkJCQkJCQkJeXl5eXl5eXl5eXl5eT09PT09PT0IHUg53fn5+fn5+
        fn5+Kyg4fn5+fn4HBwcHBwcHBwdHB0dHR0dHR0dHR0crKysrK2tra2traxBraxAQEBAQWVkrZAVUa35+
        fn5+fn5+fn4mBSBkEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBBZFGNt
        In5+fn5+fn5+fn5+BxJ0DQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0N
        DUQFMgd+fn5+fn5+fn5+fn5HfHRtbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1tbW1t
        bW1tbW0FEkd+fn5+fn5+fn5+fn5+fhBTIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
        IyMjIyMjIyMjFwkHfn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+fn5+
        fn5+fn5+fn5+fn5+fn5+fn5+fn5+fgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
</value>
  </data>
</root>